#!/usr/bin/env bash
# a stack layout for bspwm
# bspc subscribe node_{remove,add} | while read _; do ./stack_layout.sh; done

master_size=.60

jget() {
    # thanks camille
    key=$1
    shift
    var=${*#*\"$key\":}
    var=${var%%[,\}]*}
    echo "$var"
}

# ensure the count of the master child is 1, or make it so
#win_count=$(bspc query -N '@/1' -n .descendant_of.tiled.window | wc -l)
#echo win_count: $win_count
#if [ $win_count -ne 1 ]; then
if [ -z "$1" ]; then
	new_master=$(bspc query -N '@/1' -n .window.descendant_of.tiled | head -n 1)
	if [ -z "$new_master" ]; then
		new_master=$(bspc query -N '@/2' -n .window.descendant_of.tiled | head -n 1)
	fi
	if [ -z "$new_master" ]; then
		new_master=$(bspc query -N last.local.tiled | head -n 1)
	fi
	if [ -z "$new_master" ]; then
		exit 1	
	fi

else
	bspc node '@/brother' -n '@/2'
	new_master=$1
fi

#echo "new master: $new_master"
bspc node "$new_master" -n '@/1'

# move everything into 2 that is not our new_master
for wid in $(bspc query -N '@/1' -n .local.descendant_of.window.tiled | grep -v $new_master); do
	bspc node "$wid" -n '@/2'
done

#bspc node '@/1/2' -n '@/2'
#fi

# amend the split type so we are arranged correctly
# on all stacking children
correct_rotation() {
    # sleep 5
    # sleep 0.5
	node=$1
    want=$2
	#echo ""
	#echo $node $want
	if [ -z `bspc query -T -n $node | cut -d"}" -f 1 | grep "\"splitType\":\"$want\""` ]; then
		bspc node "$node" -R $3
	fi
}


correct_rotation '@/' vertical 270
correct_rotation '@/2' horizontal 90

stack_node=$(bspc query -N '@/2' -n)
for parent in $(bspc query -N '@/2' -n '.descendant_of.!window.tiled') ; do
     correct_rotation $parent horizontal 90
done


bspc node '@/2' -B

# mon_width=$(bspc query -T -m | jq .rectangle.width)
mon_width=$(jget width "$(bspc query -T -m)")

want=$(echo $master_size \* $mon_width | bc -l | sed 's/\..*//')
have=$(jget width "$(bspc query -T -n '@/1')")

bspc node '@/1' --resize right $((want - have)) 0

# for parent in $(bspc query -N '@/2' -n '.descendant_of.tiled.!window' | grep -v "$stack_node"); do
# for parent in $(bspc query -N '@/2' -n '.descendant_of' | grep -v "$stack_node"); do
