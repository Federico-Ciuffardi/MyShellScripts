#! /usr/bin/python3

# calcurse-notify [MINS] 
# daemon that notifies MINS minutes before an event (MINS = 30 by default) 

import subprocess
import sys
import datetime
import time
import re

def run(command):
    return subprocess.check_output(command.split()).decode("utf-8")

def inRange(val,init,delta):
    return init <= val and val < init + delta 

def notifyOnDelta(delta, urgency):
    wasOnLastUpdate = lastUpdate and inRange(eventDateTime,lastUpdate,delta)
    isOnCurrentUpdate = inRange(eventDateTime,currentTime,delta)
    if isOnCurrentUpdate and not wasOnLastUpdate:
        subprocess.call(["notify-send","--urgency=" + urgency,
                            description + "\n\n" +
                            "At " + eventDateTime.strftime("%H:%M on %A %d/%m/%Y")]) 
        return True
    return False

before = float(sys.argv[1] if len(sys.argv) > 1 else 30)

lowDelta = datetime.timedelta(minutes=before*2) 
normalDelta = datetime.timedelta(minutes=before) 
criticalDelta =datetime.timedelta(minutes=5) 

lastUpdate = None

while True:
    currentTime = datetime.datetime.now()
    lines = [l.strip() for l in run("gcalcli --nocolor agenda --military --nostarted").splitlines()]
    # i = 0
    # while i < len(lines):
    #     p = re.compile(r"([0-9]{2})/([0-9]{2})/([0-9]{2})")
    #     match = p.search(lines[i])
    #     if match: 
    #         eventDate = datetime.date(year=int(match.group(3))+2000,month=int(match.group(2)),day=int(match.group(1)))
    #         i += 1

    #     p = re.compile(r"\* (.*)")
    #     match = p.search(lines[i])
    #     if match: # all day event
    #         description = match.group(1)
    #         if currentTime.date() == eventDate - datetime.timedelta(days=1) and (not lastUpdate or currentTime.date() != lastUpdate.date()):
    #             subprocess.call(["notify-send", description + "\n\n"+ "Tomorrow " + eventDate.strftime("%A %d/%m/%Y") ]) 
    #         elif currentTime.date() == eventDate and (not lastUpdate or currentTime.date() != lastUpdate.date()):
    #             subprocess.call(["notify-send", description + "\n\n"+ "Today " + eventDate.strftime("%A %d/%m/%Y")]) 
    #     else:
    #         p = re.compile(r"- ([0-9]{2}):([0-9]{2})")
    #         match = p.search(lines[i])
    #         if match: # normal event 
    #             eventTime = datetime.time(hour=int(match.group(1)),minute=int(match.group(2)))
    #             eventDateTime = datetime.datetime.combine(eventDate,eventTime)
    #             i += 1
    #             description = lines[i]
    #             notifyOnDelta(criticalDelta,"critical") or notifyOnDelta(normalDelta,"normal") or notifyOnDelta(lowDelta,"low")

    #     i += 1
    lastUpdate = currentTime
    time.sleep(60)
