#!/bin/sh

# Usage:
# tabc.sh <tabbed-id> <command>
# Commands:
#    add <window-id> 	- Add window to tabbed
#    remove <window-id> - Remove window from tabbed
#    list				- List all clients of tabbed

#
# Functions
#

# Get wid of root window
function get_root_wid {
	xwininfo -root | awk '/Window id:/{print $4}'
}

# Get children of tabbed
function get_clients {
	id=$1
	xwininfo -id $id -children | sed -n '/[0-9]\+ \(child\|children\):/,$s/ \+\(0x[0-9a-z]\+\).*/\1/p'
}

# Get class of a wid
function get_class {
	id=$1
	xprop -id $id | sed -n '/WM_CLASS/s/.*, "\(.*\)"/\1/p'
}


function remove_allf {
	tabbed=$1; shift
	bspc node -t floating
	to_remove=`get_clients $tabbed | awk '{ for (i=NF; i>1; i--) printf("%s ",$i); print $1; }'`
	for wid in $to_remove ; do
		xdotool windowreparent $wid $(get_root_wid)
	done
	wmctrl -ic $tabbed
}

function tab_allf {
	tabbed -c &
	bspc subscribe node_add | while read -r add ; do
		id=$(echo "$add" | awk '{print $5}')
		class=$(get_class "$id")
		if [ "$class" = "tabbed" ] ; then
			tabbedid=$id
			while [ ! -z $1 ] ; do
				xdotool windowreparent $1 $tabbedid
				shift
			done
			exit 0
		fi
	done
}

#
# Main Program
#

#if [ "$(get_class $tabbed)" != "tabbed" ]; then
#	echo "Not an instance of tabbed" 2>&1
#fi

cmd=$1; shift

case $cmd in
	add)
		tabbed=$1; shift
		wid=$1; shift
		xdotool windowreparent $wid $tabbed
		;;
	remove)
		tabbed=$1; shift
		wid=$1; shift
		xdotool windowreparent $wid $(get_root_wid)
		;;
	list)
		tabbed=$1; shift
		get_clients $tabbed
		;;
	remove_all)
		remove_allf $1
		;;
	tab_all)
		tab_allf $@
		;;
	toggle)
		class=$(get_class "$1")
		if [ "$class" = "tabbed" ]; then
			remove_allf $1
		else
			tab_allf $@
		fi
		;;
	esac

